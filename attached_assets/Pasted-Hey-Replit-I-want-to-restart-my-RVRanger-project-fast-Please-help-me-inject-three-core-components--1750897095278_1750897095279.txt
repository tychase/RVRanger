Hey Replit, I want to restart my RVRanger project fast. Please help me inject three core components so it functions immediately and feels clean + modern. Here's what I need:

---

1. **Scraper Script** (`prevost_scraper.py`)
- Scrapes the first 20 real listings from https://www.prevost-stuff.com/forsale/public_list_ads.php
- It avoids sidebar ads by skipping images under ~25KB
- It pulls title, price, year, model, slides, converter, and featured image
- Save images to `public/images/rv_listings/`
- Save JSON output to `listings.json`

**Why?** This gives me a fast dev loop to test without relying on live scraping every time.

---

2. **API Backend** (`api.py`)
- Use FastAPI
- `/listings`: returns the JSON, default sorted by price (desc)
- `/search?q=`: filters title/model, supports sorting by `price` or `year`, ascending/descending
- CORS enabled for front-end connection
- Load from the `listings.json` generated by the scraper

**Why?** This helps me decouple the front-end and back-end cleanly and keep it fast.

---

3. **React Frontend Page** (`client/src/App.tsx`)
- Replace the main App component with:
  - A search input (filters title or model, debounced)
  - Sort dropdown (price/year) + toggle (asc/desc)
  - Grid of cards with featured image, title, price, year, slides
- Default sort: price descending
- Cards should use `bg-white/70`, no hard borders, subtle shadows (like InnerCircle)
- Use color: `#2C3E50` for accents

**Why?** This gives me an elegant zero-border aesthetic. Looks way cleaner than competitors like PrevostStuff or PrevostPlus.

---

Please cleanly inject each file in its proper place (scraper at root, API at root, React page in client/src) and let me know when it’s done. Also, make sure to create the folder `public/images/rv_listings` if needed. Don’t overwrite anything else.


#!/usr/bin/env python3
"""
Prevost‑stuff ➜ listings.json   (first 20 rows, no sidebar ads)
"""

import json, re, hashlib, os, time
from urllib.parse import urljoin
import requests
from bs4 import BeautifulSoup

BASE_URL   = "https://www.prevost-stuff.com"
LIST_PAGE  = f"{BASE_URL}/forsale/public_list_ads.php"
MAX_ITEMS  = 20
OUT_JSON   = "listings.json"
IMG_DIR    = "public/images/rv_listings"
HEADERS    = {"User-Agent": "CoachRangerBot/1.0 (+https://CoachRanger.fake)"}

os.makedirs(IMG_DIR, exist_ok=True)

def slug(text:str) -> str:
    return re.sub(r"[^a-z0-9]+", "-", text.lower()).strip("-")

def md5(data:bytes)->str:
    return hashlib.md5(data).hexdigest()[:12]

def download_img(src:str, title:str)->str|None:
    if not src: return None
    if not src.startswith("http"): src = urljoin(BASE_URL, src)
    r = requests.get(src, headers=HEADERS, timeout=15)
    if r.status_code != 200: return None
    # Skip tiny / ad banners
    if len(r.content) < 25_000:   # < ~25 kB is almost always an ad thumb
        return None
    fname = f"rv_{slug(title)}_{md5(r.content)}.jpg"
    path  = os.path.join(IMG_DIR, fname)
    with open(path, "wb") as f: f.write(r.content)
    return f"/{path}"

def scrape():
    soup = BeautifulSoup(requests.get(LIST_PAGE, headers=HEADERS, timeout=15).text, "html.parser")
    listings, seen = [], set()

    for row in soup.select("table tr"):
        # Each real listing has at least 3 <td> cells and a link with a $price nearby
        cells = row.find_all("td")
        if len(cells) < 3: continue
        link  = row.find("a", href=True)
        if not link:       continue
        price_match = re.search(r"\$\d[\d,]*", row.get_text(" ", strip=True))
        if not price_match: continue

        title = link.get_text(" ", strip=True)
        if title in seen: continue                   # safety
        seen.add(title)

        detail_url = urljoin(BASE_URL, link["href"])
        featured   = download_img(link.find("img")["src"] if link.find("img") else "", title)

        # Parse quick meta right from table text
        row_txt = row.get_text(" ", strip=True)
        price   = int(price_match.group(0).replace("$","").replace(",",""))
        year_m  = re.search(r"\b(19|20)\d{2}\b", row_txt)
        yr      = int(year_m.group()) if year_m else None
        model_m = re.search(r"Model:\s*([A-Z0-9\-]+)", row_txt, re.I)
        model   = model_m.group(1) if model_m else None
        slides_m= re.search(r"Slides?:\s*(\d)", row_txt, re.I)
        slides  = int(slides_m.group(1)) if slides_m else 0
        converter_m = re.search(r"Converter:\s*([^|]+)", row_txt, re.I)
        converter   = converter_m.group(1).strip() if converter_m else None

        listings.append({
            "title": title,
            "detail_url": detail_url,
            "price": price,
            "year": yr,
            "model": model,
            "slides": slides,
            "converter": converter,
            "featured_image": featured,
        })
        if len(listings) >= MAX_ITEMS: break

    with open(OUT_JSON,"w") as f: json.dump(listings,f,indent=2)
    print(f"✱ Saved {len(listings)} listings ➜ {OUT_JSON}")

if __name__ == "__main__":
    t0=time.time(); scrape(); print("Done in %.1fs"%(time.time()-t0))


# pip install fastapi uvicorn pydantic
from fastapi import FastAPI, Query, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json, operator

class Listing(BaseModel):
    title:str
    detail_url:str
    price:int
    year:int|None=None
    model:str|None=None
    slides:int|None=0
    converter:str|None=None
    featured_image:str|None=None

with open("listings.json") as f:
    DATA: list[Listing] = [Listing(**x) for x in json.load(f)]

app = FastAPI(title="CoachRanger API")
app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_methods=["*"], allow_headers=["*"])

def sort_listings(items, key, direction):
    if key not in Listing.model_fields: return items
    reverse = direction=="desc"
    return sorted(items, key=lambda x: getattr(x, key) or 0, reverse=reverse)

@app.get("/listings", response_model=list[Listing])
def listings(sort:str="price", dir:str="desc"):
    return sort_listings(DATA, sort, dir)

@app.get("/search", response_model=list[Listing])
def search(q:str = Query(..., min_length=2), sort:str="price", dir:str="desc"):
    needle = q.lower()
    hits = [l for l in DATA if needle in l.title.lower() or (l.model and needle in l.model.lower())]
    return sort_listings(hits, sort, dir)


Run with: uvicorn api:app --reload  # defaults to http://127.0.0.1:8000


import { useEffect, useState, useMemo } from "react";
import axios from "axios";

interface Listing {
  title: string;
  detail_url: string;
  price: number;
  year?: number;
  model?: string;
  slides?: number;
  converter?: string;
  featured_image?: string;
}

export default function App() {
  const [all, setAll]       = useState<Listing[]>([]);
  const [query, setQuery]   = useState("");
  const [sort,  setSort]    = useState<"price"|"year">("price");
  const [dir,   setDir]     = useState<"asc"|"desc">("desc");

  useEffect(() => {
    axios.get<Listing[]>(`http://127.0.0.1:8000/listings?sort=${sort}&dir=${dir}`)
         .then(r => setAll(r.data))
         .catch(console.error);
  }, [sort, dir]);

  const visible = useMemo(() => {
    const q = query.trim().toLowerCase();
    return q
      ? all.filter(l => l.title.toLowerCase().includes(q) || (l.model?.toLowerCase().includes(q)))
      : all;
  }, [all, query]);

  return (
    <div className="min-h-screen bg-slate-50 text-slate-900">
      <header className="px-6 py-4 max-w-5xl mx-auto">
        <h1 className="font-semibold text-2xl" style={{color:"#2C3E50"}}>CoachRanger</h1>
        <div className="mt-4 flex flex-col sm:flex-row gap-3">
          <input
            type="search"
            placeholder="Search model, converter, etc."
            className="flex-1 bg-white/80 backdrop-blur px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-[#2C3E50]/40"
            onChange={e=>setQuery(e.target.value)}
            value={query}
          />

          <select value={sort} onChange={e=>setSort(e.target.value as any)}
            className="bg-white/80 px-3 py-2 rounded-md">
            <option value="price">Price</option>
            <option value="year">Year</option>
          </select>

          <button onClick={()=>setDir(dir==="asc"?"desc":"asc")}
            className="bg-[#2C3E50] text-white px-4 py-2 rounded-md">
            {dir==="asc" ? "↑" : "↓"}
          </button>
        </div>
      </header>

      <main className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto px-6 pb-12">
        {visible.map(l => (
          <article key={l.detail_url} className="bg-white/70 backdrop-blur rounded-lg shadow-sm hover:shadow-md transition">
            {l.featured_image && (
              <img src={l.featured_image} alt={l.title} className="w-full h-56 object-cover rounded-t-lg" />
            )}
            <div className="p-4">
              <h2 className="font-medium">{l.title}</h2>
              <p className="text-sm mt-1">${l.price.toLocaleString()} {l.year && `• ${l.year}`}</p>
              {l.model && <p className="text-xs text-slate-600 mt-1">Model: {l.model}{l.slides ? ` • Slides: ${l.slides}` : ""}</p>}
              <a href={l.detail_url} target="_blank" rel="noopener"
                 className="inline-block mt-3 text-sm font-medium text-[#2C3E50]/80 hover:text-[#2C3E50]">
                 View on Prevost‑stuff →
              </a>
            </div>
          </article>
        ))}
      </main>
    </div>
  );
}


Styling notes

Borderless feel: transparent borders, subtle shadow-sm, white‑glass (bg-white/70 backdrop-blur) cards.

Primary color: #2C3E50 pulled straight from your existing theme.json.

Tailwind already in your repo; no config changes needed, but you can add:

/* client/src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Override body scrollbars for even cleaner look */
html,body { background:#F9FAFB; }

 How to hook it up quickly in Replit

# one‑time
pip install requests beautifulsoup4 fastapi "uvicorn[standard]" pydantic
npm install           # inside client/

# dev loop
python prevost_scraper.py          # refresh data
uvicorn api:app --reload &         # back‑end on :8000
npm run dev --prefix client        # Vite front‑end on :5173
